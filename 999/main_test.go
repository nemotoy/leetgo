package tree

import (
	"fmt"
	"reflect"
	"testing"
)

/*
	## summary
	R or Bが取得可能なpawnsの個数
*/
func numRookCaptures(board [][]byte) int {
	x0, y0 := 0, 0
	for i := 0; i < 8; i++ {
		for j := 0; j < 8; j++ {
			if board[i][j] == 'R' {
				x0, y0 = i, j
			}
		}
	}
	ret := 0
	direction := [][]int{
		{1, 0}, {0, 1}, {-1, 0}, {0, -1},
	}
	for _, d := range direction {
		x := x0 + d[0]
		y := y0 + d[1]
		for x >= 0 && x < 8 && y >= 0 && y < 8 {
			if board[x][y] == 'p' {
				ret++
			}
			if board[x][y] != '.' {
				break
			}
			x += d[0]
			y += d[1]
		}
	}
	return ret
}

func TestNumRookCaptures(t *testing.T) {
	tests := []struct {
		in  [][]byte
		out int
	}{
		{
			[][]byte{
				{'.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', 'p', '.', '.', '.', '.'},
				{'.', '.', '.', 'R', '.', '.', '.', 'p'},
				{'.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', 'p', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.'},
			},
			3,
		},
		{
			[][]byte{
				{'.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', 'p', 'p', 'p', 'p', 'p', '.', '.'},
				{'.', 'p', 'p', 'B', 'p', 'p', '.', '.'},
				{'.', 'p', 'B', 'R', 'B', 'p', '.', '.'},
				{'.', 'p', 'p', 'B', 'p', 'p', '.', '.'},
				{'.', 'p', 'p', 'p', 'p', 'p', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.'},
			},
			0,
		},
		{
			[][]byte{
				{'.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', 'p', '.', '.', '.', '.'},
				{'.', '.', '.', 'p', '.', '.', '.', '.'},
				{'p', 'p', '.', 'R', '.', 'p', 'B', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.'},
				{'.', '.', '.', 'B', '.', '.', '.', '.'},
				{'.', '.', '.', 'p', '.', '.', '.', '.'},
				{'.', '.', '.', '.', '.', '.', '.', '.'},
			},
			3,
		},
	}
	for _, tt := range tests {
		t.Run(fmt.Sprintf("%v", 'a'), func(t *testing.T) {
			got := numRookCaptures(tt.in)
			if !reflect.DeepEqual(got, tt.out) {
				t.Errorf("got: %v, want: %v", got, tt.out)
			}
		})
	}
}
